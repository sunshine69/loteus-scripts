#!/usr/bin/env python

"""
Set the system timezone based on IP geolocation.
"""

from __future__ import print_function
import argparse
import errno
import json
import os
import sys

try:
    from urllib.request import urlopen
    from urllib.parse import urlencode
except ImportError:  # Python 2 fallback
    from urllib import urlopen, urlencode

AUTH = {
    "ipinfodb": {
        "api_key": "c253fddcfa96b60155aa66fb51b20cba"
                   "dbcfa2020b2d27a89d4554ac2799b935",
    },
    "geonames": {
        "username": "tzupdate",
    },
}
PATH = {
    "zoneinfo": "/usr/share/zoneinfo",
    "localtime": "/etc/localtime",
}


def location_from_ip(ip=None):
    """
    Return location data for an IP using the IPInfoDB API.

    :param ip: an IP address to use to override automatically detecting it
    :returns: latitude and longitude
    """

    url = "http://api.ipinfodb.com/v3/ip-city/?"
    url_params = {
        "key": AUTH["ipinfodb"]["api_key"],
        "format": "json",
    }

    if ip is not None:
        url_params["ip"] = ip

    res_handle = urlopen(url + urlencode(url_params))

    try:
        res_encoding = res_handle.headers.get_content_charset()
    except AttributeError:  # Python 2 fallback
        res_encoding = res_handle.headers.getparam("charset")

    res_data_raw = res_handle.read().decode(res_encoding)

    try:
        res_data = json.loads(res_data_raw)
    except ValueError:
        # The JSON failed to decode, this probably means that IPInfoDB
        # returned an error. When it does so, it no longer returns JSON for
        # some reason.
        error = res_data_raw.split(";")[1]
        if error:
            raise LookupError(error)
        else:
            raise

    coords = (
        res_data["latitude"],
        res_data["longitude"],
    )

    return coords


def timezone_from_location(coords):
    """
    Return the timezone for a set of coordinates using the GeoNames API.

    :param coords: latitude and longitude
    :returns: timezone, or None if none is available
    """

    url = "http://api.geonames.org/timezoneJSON?"

    latitude, longitude = coords
    url_params = {
        "username": AUTH["geonames"]["username"],
        "lat": latitude,
        "lng": longitude,
    }

    res_handle = urlopen(url + urlencode(url_params))

    try:
        res_encoding = res_handle.headers.get_content_charset()
    except AttributeError:  # Python 2 fallback
        res_encoding = res_handle.headers.getparam("charset")

    res_data = json.loads(res_handle.read().decode(res_encoding))

    timezone = res_data.get("timezoneId")

    return timezone


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-p", "--print-only",
        action="store_true",
        help="print the timezone, but don't update " + PATH["localtime"]
    )
    parser.add_argument(
        "-a", "--ip",
        help="use this IP instead of automatically detecting it"
    )
    args = parser.parse_args()

    try:
        coords = location_from_ip(ip=args.ip)
    except LookupError as e:
        print("IPInfoDB returned an error: " + str(e), file=sys.stderr)
        sys.exit(3)

    timezone = timezone_from_location(coords)

    if timezone is None:
        print("No timezone available for this IP.", file=sys.stderr)
        sys.exit(2)

    if not args.print_only:
        timezone_path = os.path.join(PATH["zoneinfo"], timezone)
        if not os.path.isfile(timezone_path):
            print("Unknown timezone: " + timezone_path, file=sys.stderr)
            sys.exit(1)

        try:
            os.unlink(PATH["localtime"])
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise

        os.symlink(timezone_path, PATH["localtime"])

    print(timezone)
